{"version":3,"sources":["Employees/EmployeesAPI.js","redux_store/employeesReducer.js","Employees/EmployessBirth.js","Employees/Employees.js","App.js","redux_store/redux_store.js","index.js"],"names":["instance","axios","baseURL","employeesAPI","get","response","data","ADD_EMPLOYEES","PUT_EMPLOYEES","SELECT_EMPLOYEE","UNSELECT_EMPLOYEE","initialState","employees","selectedEmployees","selectEmployee","id","type","unselectEmployee","employeesReducer","state","action","localStorage","setItem","stateCopy","filter","monthNamesArr","EmployessBirth","employeesArr","length","reduce","accObj","monthObj","month","date","Date","getMonth","formatMonth","dob","employee","push","className","Object","keys","sort","a","b","indexOf","map","MonthBlock","formatDate","day","getDate","monthIndex","year","getFullYear","item","lastName","firstName","connect","getEmployees","dispatch","then","putSelectedEmployee","props","useDispatch","useEffect","selectedEmployeesArr","getItem","split","alphabet","accArr","letter","letterBlock","letterArr","birhday","checked","find","renderEmployee","EmployeeCard","onChange","e","target","App","path","exact","to","reduser","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1f71e595.chunk.js","sourcesContent":["import * as axios from \"axios\";\n\nconst instance = axios.create({\n  baseURL: \"https://yalantis-react-school-api.yalantis.com/api/task0/users\",\n});\n\nexport const employeesAPI = {\n  async getEmployees() {\n    let response = await instance.get();\n    return response.data;\n  },\n};\n","import { employeesAPI } from \"../Employees/EmployeesAPI\";\n\nconst ADD_EMPLOYEES = \"ADD_EMPLOYEES\";\nconst PUT_EMPLOYEES = \"PUT_EMPLOYEES\";\nconst SELECT_EMPLOYEE = \"SELECT_EMPLOYEE\";\nconst UNSELECT_EMPLOYEE = \"UNSELECT_EMPLOYEE\";\n\nlet initialState = {\n  employees: [],\n  selectedEmployees: [],\n};\n\nconst employeesReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_EMPLOYEES:\n      return { ...state, employees: action.employees };\n    case PUT_EMPLOYEES:\n      return {\n        ...state,\n        selectedEmployees: action.selectedEmployees,\n      };\n    case SELECT_EMPLOYEE:\n      localStorage.setItem(\"selectedEmploees\", [\n        ...state.selectedEmployees,\n        action.id,\n      ]);\n      return {\n        ...state,\n        selectedEmployees: [...state.selectedEmployees, action.id],\n      };\n    case UNSELECT_EMPLOYEE:\n      let stateCopy = {\n        ...state,\n        selectedEmployees: [\n          ...state.selectedEmployees.filter((id) => id !== action.id),\n        ],\n      };\n\n      localStorage.setItem(\"selectedEmploees\", [\n        ...stateCopy.selectedEmployees,\n      ]);\n      return stateCopy;\n    default:\n      return state;\n  }\n};\n\nconst setEmployees = (employees) => ({\n  type: ADD_EMPLOYEES,\n  employees,\n});\n\nexport const putSelectedEmployee = (selectedEmployees) => ({\n  type: PUT_EMPLOYEES,\n  selectedEmployees,\n});\n\nexport const selectEmployee = (id) => ({\n  type: SELECT_EMPLOYEE,\n  id,\n});\n\nexport const unselectEmployee = (id) => ({\n  type: UNSELECT_EMPLOYEE,\n  id,\n});\n\nexport const getEmployees = () => {\n  return (dispatch) => {\n    employeesAPI.getEmployees().then((response) => {\n      dispatch(setEmployees(response));\n    });\n  };\n};\n\nexport default employeesReducer;\n","import { connect } from \"react-redux\";\n\nconst monthNamesArr = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\",\n];\n\nconst EmployessBirth = ({ employees, selectedEmployees }) => {\n  let employeesArr = [];\n\n  if (employees.length)\n    employeesArr = employees.reduce(\n      (accObj, id) => ({\n        ...accObj,\n        [id.id]: id,\n      }),\n      {}\n    );\n\n  function formatMonth(date, monthNamesArr) {\n    let month = new Date(date);\n    let monthIndex = month.getMonth();\n    return monthNamesArr[monthIndex];\n  }\n\n  let monthObj = selectedEmployees.reduce((accObj, id) => {\n    let month = formatMonth(employeesArr[id].dob, monthNamesArr);\n    let employee = { ...employeesArr[id] };\n\n    if (!accObj[month]) {\n      return { ...accObj, [month]: [employeesArr[id]] };\n    } else {\n      accObj[month].push(employee);\n      return accObj;\n    }\n  }, {});\n\n  return (\n    <div className=\"employees_birth\">\n      <h2 className=\"employees_birth__heading\">Employees birhday</h2>\n      <div>\n        {selectedEmployees.length === 0 ? (\n          <div className=\"month_card\">{\"No selected employees\"}</div>\n        ) : (\n          Object.keys(monthObj)\n            .sort((a, b) => monthNamesArr.indexOf(a) - monthNamesArr.indexOf(b))\n            .map((month) => (\n              <MonthBlock\n                monthObj={monthObj[month]}\n                month={month}\n                key={monthObj[month][0].id}\n                id={monthObj[month].id}\n              />\n            ))\n        )}\n        {}\n      </div>\n    </div>\n  );\n};\n\nexport default EmployessBirth;\n\nconst MonthBlock = ({ monthObj, month }) => {\n  function formatDate(date) {\n    let day = date.getDate();\n    let monthIndex = date.getMonth();\n    let year = date.getFullYear();\n\n    return `${day} ${monthNamesArr[monthIndex]} ${year}`;\n  }\n  return (\n    <div className=\"month_card\">\n      <div className=\"month_name\">{month}</div>\n      <ul>\n        {Object.keys(monthObj)\n          .sort((a, b) => new Date(monthObj[a].dob) - new Date(monthObj[b].dob))\n          .map((item) => (\n            <li key={monthObj[item].id}>{`${monthObj[item].lastName} ${\n              monthObj[item].firstName\n            } - ${formatDate(\n              new Date(monthObj[item].dob),\n              monthNamesArr\n            )}`}</li>\n          ))}\n      </ul>\n    </div>\n  );\n};\n","import React, { useEffect } from \"react\";\nimport { connect, useDispatch } from \"react-redux\";\nimport {\n  getEmployees,\n  selectEmployee,\n  putSelectedEmployee,\n  unselectEmployee,\n} from \"../redux_store/employeesReducer\";\nimport EmployessBirth from \"./EmployessBirth\";\n\nconst Employess = (props) => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    props.getEmployees();\n    let selectedEmployeesArr = localStorage.getItem(\"selectedEmploees\");\n    if (selectedEmployeesArr) {\n      dispatch(props.putSelectedEmployee(selectedEmployeesArr.split(\",\")));\n    }\n  }, [props.employee]);\n\n  const alphabet = [...\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"];\n\n  function renderEmployee(letter) {\n    const letterArr = props.employees.filter(\n      (item) => item.lastName[0] === letter\n    );\n    if (letterArr.length === 0) {\n      return <div>{\"-----\"}</div>;\n    } else {\n      return letterArr.map((item) => (\n        <EmployeeCard\n          key={item.id}\n          id={item.id}\n          lastName={item.lastName}\n          firstName={item.firstName}\n          selectEmployee={selectEmployee}\n          unselectEmployee={unselectEmployee}\n          birhday={item.dob}\n          checked={\n            !!props.selectedEmployees.find((employee) => item.id === employee)\n          }\n        />\n      ));\n    }\n  }\n  return (\n    <>\n      <div className=\"employes\">\n        <h2 className=\"employee_heading\"> Employees</h2>\n        <div className=\"alphabet\">\n          {alphabet.reduce((accArr, item) => {\n            let letter = item;\n            let letterBlock = renderEmployee(letter);\n            return [\n              ...accArr,\n              <div className=\"letter_block\" key={item}>\n                <h2>{letter}</h2>\n                <div>{letterBlock}</div>\n              </div>,\n            ];\n          }, [])}\n        </div>\n      </div>\n      {props.employees.length > 0 && (\n        <EmployessBirth\n          employees={props.employees}\n          selectedEmployees={props.selectedEmployees}\n        />\n      )}\n    </>\n  );\n};\nlet mapStateToProps = (state) => ({\n  employees: state.employees,\n  selectedEmployees: state.selectedEmployees,\n});\nexport default connect(mapStateToProps, {\n  getEmployees,\n  putSelectedEmployee,\n  selectEmployee,\n  unselectEmployee,\n})(Employess);\n\nconst EmployeeCard = ({ id, lastName, firstName, selectEmployee, checked }) => {\n  const dispatch = useDispatch();\n\n  let changeChecked = (e) => {\n    if (e.target.checked) {\n      dispatch(selectEmployee(id));\n    } else {\n      dispatch(unselectEmployee(id));\n    }\n  };\n  return (\n    <div className=\"employee_card\" key={id}>\n      <div>\n        {lastName} {firstName}\n      </div>\n      <div>\n        <input type=\"checkbox\" checked={!!checked} onChange={changeChecked} />\n      </div>\n    </div>\n  );\n};\n","import \"./App.css\";\nimport { HashRouter, Link, Route } from \"react-router-dom\";\nimport Employess from \"./Employees/Employees\";\n\nfunction App() {\n  return (\n    <>\n      <HashRouter>\n        <Route path=\"/\" exact>\n          <div className=\"employees_link\">\n            <Link to=\"/employees\">Go to employees page</Link>\n          </div>\n        </Route>\n        <Route path=\"/employees\">\n          <div className=\"container\">\n            <div className=\"employess_page\">\n              <Employess />\n            </div>\n          </div>\n        </Route>\n      </HashRouter>\n    </>\n  );\n}\n\nexport default App;\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunkMiddleware from \"redux-thunk\";\nimport employeesReducer from \"./employeesReducer\";\n\nlet reduser = employeesReducer;\n\nlet store = createStore(reduser, applyMiddleware(thunkMiddleware));\n\nwindow.store = store;\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux_store/redux_store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}